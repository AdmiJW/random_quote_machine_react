{"version":3,"sources":["Components/QuoteDiv.js","Components/LogoDiv.js","Components/QuoteWrapper.js","Components/MainDiv.js","App.js","index.js"],"names":["QuoteDiv","props","quote","quoteText","quoteAuthor","className","style","fetching","opacity","id","LogoDiv","rel","href","encodeURIComponent","window","location","target","src","alt","QuoteWrapper","state","quoteHistory","currentQuote","prevQuote","bind","nextQuote","fetchQuote","quoteFetched","limitHistory","this","author","setState","hasOwnProperty","length","slice","content","fetch","then","e","json","catch","err","message","len","changeBg","type","onClick","disabled","tabIndex","React","Component","MainDiv","currBg","Fragment","visibleBGID","visibleVal","i","push","obtainBGJSX","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.722864bc.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction QuoteDiv(props) {\r\n    const { quoteText, quoteAuthor } = props.quote;\r\n\r\n    return (\r\n        <blockquote className='blockquote' style={\r\n            props.fetching ? { opacity: 0 } : { opacity: 1 }\r\n        }>\r\n            <p id='text'>{quoteText}</p>\r\n            <footer id='author' className='blockquote-footer'>\r\n                {(quoteAuthor) ? quoteAuthor : 'Anonymous'}\r\n            </footer>\r\n        </blockquote>\r\n    )\r\n}\r\n\r\nexport default QuoteDiv;","import React from 'react'\r\n\r\n\r\nfunction LogoDiv(props) {\r\n    return (\r\n        <div className='logo'>\r\n            { /* Clicking this will open a Facebook share with the link of the window's location */ }\r\n            <a rel='noopener noreferrer' href={`http://www.facebook.com/sharer.php?u=${ encodeURIComponent(window.location.href) }`} target='_blank'>\r\n                <img className='logo-pic' id='twitter' src='https://raw.githubusercontent.com/AdmiJW/Items/master/productLanding/facebook.png' alt='facebook logo'/>\r\n            </a>\r\n\r\n            { /* Clicking this will open a Twitter tweet with the link of the window's location and quote text */ }\r\n            <a id='tweet-quote' rel='noopener noreferrer' href={`https://twitter.com/intent/tweet/?text=${encodeURIComponent(props.quote.quoteText)}&hashtags=RandomQuoteMachine&url=${encodeURIComponent( window.location.href )}`} \r\n                target=\"_blank\">\r\n                <img className='logo-pic' id='facebook' src='https://raw.githubusercontent.com/AdmiJW/Items/master/productLanding/twitter.png' alt='twitter logo'/>\r\n            </a>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default LogoDiv;","import React from 'react';\r\n\r\nimport QuoteDiv from './QuoteDiv';\r\nimport LogoDiv from './LogoDiv';\r\n\r\nclass QuoteWrapper extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            quoteHistory: [],           //History of shown quotes, size 10\r\n            currentQuote: {},           //Quote currently showing\r\n            fetching: false             //Shows a loading spinner when true\r\n        }\r\n\r\n        this.prevQuote = this.prevQuote.bind(this);\r\n        this.nextQuote = this.nextQuote.bind(this);\r\n        this.fetchQuote = this.fetchQuote.bind(this);\r\n        this.quoteFetched = this.quoteFetched.bind(this);\r\n\r\n        this.limitHistory = 10;     //Set this to limit how many past quotes to be stored\r\n    }\r\n\r\n    //When mounted, component immediately get nextQuote\r\n    componentDidMount() {\r\n        this.nextQuote();\r\n    }\r\n\r\n\r\n    //Called as callback when the quote is fetched from the quote API\r\n    quoteFetched(quote) {\r\n        //Fetched the same quote again. Refetch to get a different one\r\n        if (this.state.currentQuote.quoteAuthor === quote.author ) {\r\n            this.fetchQuote();\r\n        }\r\n        else {\r\n            this.setState(state => ({\r\n\r\n                // Has to check if the current quote is empty or not. Without this code, the app when launched, will\r\n                // add an empty object to the quoteHistory\r\n                quoteHistory: (state.currentQuote.hasOwnProperty(\"quoteAuthor\")? \r\n                    //Check if the quoteHistory contains over 10 items? If yes, then discard the first one.\r\n                    (state.quoteHistory.length >= this.limitHistory)?\r\n                        [ ...state.quoteHistory.slice(1, this.limitHistory), state.currentQuote ]:\r\n                        [...state.quoteHistory, state.currentQuote]: \r\n                    //End of checking if quoteHistory over 10 items\r\n                state.quoteHistory),        //No quoteAuthor in currentQuote. Don't add to quote History\r\n\r\n                currentQuote: {\r\n                    quoteText: quote.content,\r\n                    quoteAuthor: quote.author\r\n                },\r\n                fetching: false\r\n            }) );\r\n        }\r\n    }\r\n\r\n    fetchQuote() {\r\n        const target = 'http://api.quotable.io/random';\r\n\r\n        this.setState( {fetching: true} );\r\n    \r\n        fetch(target)\r\n        .then(e => e.json() )\r\n        .then(e => this.quoteFetched(e) )\r\n        .catch( err => {                        //Both the proxy fails. Show an error message\r\n            this.setState({\r\n                currentQuote: { quoteText: 'Unable to fetch quote! ' + err.message },\r\n                fetching: false\r\n            });\r\n        });\r\n    }\r\n\r\n    prevQuote() {\r\n        //Set the last element of the quoteHistory as current Quote, and remove it from the quoteHistory\r\n        this.setState(state => {\r\n            const len = state.quoteHistory.length;\r\n            return {\r\n                quoteHistory: state.quoteHistory.slice(0, len - 1),\r\n                currentQuote: state.quoteHistory[len - 1]\r\n            };\r\n        });\r\n        this.props.changeBg();\r\n    }\r\n\r\n    nextQuote() {\r\n        this.fetchQuote();\r\n        this.props.changeBg();\r\n    }\r\n\r\n    render() {\r\n        const { fetching } = this.state;\r\n        return (\r\n            <div className='quote' id='quote-box'>\r\n                <button type='button' className='arrow-btn' id='prev-quote' onClick={this.prevQuote} disabled={this.state.quoteHistory.length === 0} tabIndex='0'>\r\n                    <i className=\"fas fa-caret-left\"></i>\r\n                </button>\r\n                <div className='quote-mid'>\r\n                    <i className=\"fas fa-spinner\" style={ \r\n                         fetching? { opacity: 1}: {opacity: 0}\r\n                         } >\r\n                    </i>\r\n                    <QuoteDiv quote={this.state.currentQuote} fetching={fetching} />\r\n                    <LogoDiv quote={this.state.currentQuote}/>\r\n                </div>\r\n                <button type='button' className='arrow-btn' id='new-quote' onClick={this.nextQuote} tabIndex='0'>\r\n                    <i className=\"fas fa-caret-right\"></i>\r\n                </button>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default QuoteWrapper;","import React from 'react';\r\n\r\nimport QuoteWrapper from './QuoteWrapper';\r\n\r\n\r\n//Function to return the JSX of the 5 different backgrounds.\r\nfunction obtainBGJSX(visibleBGID) {\r\n    const visibleVal = [];\r\n    for (let i = 0; i < 5; i ++ ) {\r\n        visibleVal.push( visibleBGID === i? 1: 0);\r\n    }\r\n    return (\r\n        <React.Fragment>\r\n            <div className='bg' id='bg-1' style={ {opacity: visibleVal[0] } } ></div>\r\n            <div className='bg' id='bg-2' style={ {opacity: visibleVal[1] } } ></div>\r\n            <div className='bg' id='bg-3' style={ {opacity: visibleVal[2] } } ></div>\r\n            <div className='bg' id='bg-4' style={ {opacity: visibleVal[3] } } ></div>\r\n            <div className='bg' id='bg-5' style={ {opacity: visibleVal[4] } } ></div>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\n\r\n\r\nclass MainDiv extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.changeBg = this.changeBg.bind(this);\r\n    }\r\n\r\n    state = {\r\n        currBg: 0\r\n    };\r\n\r\n    changeBg() {\r\n        this.setState(state => {\r\n            return { currBg: (state.currBg >= 4? 0: state.currBg + 1) };\r\n        });\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                { obtainBGJSX(this.state.currBg) }\r\n                <QuoteWrapper changeBg={this.changeBg}/>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default MainDiv;","import React from 'react';\nimport MainDiv from './Components/MainDiv';\n\nimport './Styles/style.css';\n\nclass App extends React.Component {\n  render() {\n    return (\n        <main>\n          <MainDiv />\n        </main>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}